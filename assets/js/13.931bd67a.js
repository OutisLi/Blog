(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{358:function(t,a,e){t.exports=e.p+"assets/img/60.a7076894.png"},359:function(t,a,e){t.exports=e.p+"assets/img/61.0a944134.png"},360:function(t,a,e){t.exports=e.p+"assets/img/62.cbedfc07.png"},361:function(t,a,e){t.exports=e.p+"assets/img/63.8cd20bf2.png"},362:function(t,a,e){t.exports=e.p+"assets/img/64.e0f8e26d.png"},363:function(t,a,e){t.exports=e.p+"assets/img/65.2e30e1f0.png"},364:function(t,a,e){t.exports=e.p+"assets/img/66.ea7a75f7.png"},365:function(t,a,e){t.exports=e.p+"assets/img/67.26b875f2.png"},366:function(t,a,e){t.exports=e.p+"assets/img/68.36e5a893.png"},443:function(t,a,e){"use strict";e.r(a);var s=e(14),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_2024-03-25-6-version-control-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2024-03-25-6-version-control-git"}},[t._v("#")]),t._v(" 2024.03.25-6. Version Control (Git)")]),t._v(" "),a("p",[t._v("版本控制系统 (VCSs) 是一类用于追踪源代码（或其他文件、文件夹）改动的工具。顾名思义，这些工具可以帮助我们管理代码的修改历史；不仅如此，它还可以让协作编码变得更方便。VCS 通过一系列的快照将某个文件夹及其内容保存了起来，每个快照都包含了文件或文件夹的完整状态。同时它还维护了快照创建者的信息以及每个快照的相关信息等等。")]),t._v(" "),a("p",[t._v("为什么说版本控制系统非常有用？即使您只是一个人进行编程工作，它也可以帮您创建项目的快照，记录每个改动的目的、基于多分支并行开发等等。和别人协作开发时，它更是一个无价之宝，您可以看到别人对代码进行的修改，同时解决由于并行开发引起的冲突。")]),t._v(" "),a("p",[t._v("现代的版本控制系统可以帮助您轻松地（甚至自动地）回答以下问题：")]),t._v(" "),a("ul",[a("li",[t._v("当前模块是谁编写的？")]),t._v(" "),a("li",[t._v("这个文件的这一行是什么时候被编辑的？是谁作出的修改？修改原因是什么呢？")]),t._v(" "),a("li",[t._v("最近的 1000 个版本中，何时/为什么导致了单元测试失败？")])]),t._v(" "),a("p",[t._v("尽管版本控制系统有很多， 其事实上的标准则是  Git 。")]),t._v(" "),a("h2",{attrs:{id:"_1-git-的数据模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-的数据模型"}},[t._v("#")]),t._v(" 1. Git 的数据模型")]),t._v(" "),a("h3",{attrs:{id:"_1-1-快照"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-快照"}},[t._v("#")]),t._v(" 1.1 快照")]),t._v(" "),a("p",[t._v("Git 将顶级目录中的文件和文件夹作为集合，并通过一系列快照来管理其历史记录。在 Git 的术语里，文件被称作 Blob 对象（数据对象），也就是一组数据。目录则被称之为“树”，它将名字与 Blob 对象或树对象进行映射（使得目录中可以包含其他目录）。快照则是被追踪的最顶层的树。例如，一个树看起来可能是这样的：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+- foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  + bar.txt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("blob, contents "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+- baz.txt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("blob, contents "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git is wonderful"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这个顶层的树包含了两个元素，一个名为 “foo” 的树（它本身包含了一个 blob 对象 “bar.txt”），以及一个 blob 对象 “baz.txt”。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-历史记录建模-关联快照"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-历史记录建模-关联快照"}},[t._v("#")]),t._v(" 1.2 历史记录建模：关联快照")]),t._v(" "),a("p",[t._v("版本控制系统和快照有什么关系呢？线性历史记录是一种最简单的模型，它包含了一组按照时间顺序线性排列的快照。不过出于种种原因，Git 并没有采用这样的模型。")]),t._v(" "),a("p",[t._v("在 Git 中，历史记录是一个由快照组成的有向无环图。有向无环图，听上去似乎是什么高大上的数学名词。不过不要怕，您只需要知道这代表 Git 中的每个快照都有一系列的“父辈”，也就是其之前的一系列快照。注意，快照具有多个“父辈”而非一个，因为某个快照可能由多个父辈而来。例如，经过合并后的两条分支。")]),t._v(" "),a("p",[t._v("在 Git 中，这些快照被称为“提交”。通过可视化的方式来表示这些历史提交记录时，看起来差不多是这样的：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("-- o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("-- o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("-- o\n            ^\n             "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n              --- o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("-- o\n")])])]),a("p",[t._v("上面是一个 ASCII 码构成的简图，其中的  "),a("code",[t._v("o")]),t._v("  表示一次提交（快照）。")]),t._v(" "),a("p",[t._v("箭头指向了当前提交的父辈（这是一种“在…之前”，而不是“在…之后”的关系）。在第三次提交之后，历史记录分岔成了两条独立的分支。这可能因为此时需要同时开发两个不同的特性，它们之间是相互独立的。开发完成后，这些分支可能会被合并并创建一个新的提交，这个新的提交会同时包含这些特性。新的提交会创建一个新的历史记录，看上去像这样（最新的合并提交用粗体标记）：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("-- o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("-- o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("-- o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("---- o\n            ^            /\n             "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),t._v("\n              --- o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("-- o\n")])])]),a("p",[t._v("Git 中的提交是不可改变的。但这并不代表错误不能被修改，只不过这种“修改”实际上是创建了一个全新的提交记录。而引用（参见下文）则被更新为指向这些新的提交。")]),t._v(" "),a("h3",{attrs:{id:"_1-3-数据模型及其伪代码表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数据模型及其伪代码表示"}},[t._v("#")]),t._v(" 1.3 数据模型及其伪代码表示")]),t._v(" "),a("p",[t._v("以伪代码的形式来学习 Git 的数据模型，可能更加清晰：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("// 文件就是一组数据\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" blob "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("byte"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n// 一个包含文件和目录的目录\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" tree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string, tree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" blob"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n// 每个提交都包含一个父辈，元数据和顶层树\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" struct "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    parent: array"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    author: string\n    message: string\n    snapshot: tree\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这是一种简洁的历史模型。")]),t._v(" "),a("h3",{attrs:{id:"_1-4-对象和内存寻址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-对象和内存寻址"}},[t._v("#")]),t._v(" 1.4 对象和内存寻址")]),t._v(" "),a("p",[t._v("Git 中的对象可以是 blob、树或提交：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" blob "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" tree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" commit\n")])])]),a("p",[t._v("Git 在储存数据时，所有的对象都会基于它们的  "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/SHA-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("SHA-1 哈希"),a("OutboundLink")],1),t._v("  进行寻址。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("objects "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string, object"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\ndef store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sha1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" object\n\ndef load"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("Blobs、树和提交都一样，它们都是对象。当它们引用其他对象时，它们并没有真正的在硬盘上保存这些对象，而是仅仅保存了它们的哈希值作为引用。")]),t._v(" "),a("p",[t._v("例如，"),a("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/version-control/#snapshots",target:"_blank",rel:"noopener noreferrer"}},[t._v("上面"),a("OutboundLink")],1),t._v("例子中的树（可以通过  "),a("code",[t._v("git cat-file -p 698281bc680d1995c5f4caaf3359721a5a58d48d")]),t._v("  来进行可视化），看上去是这样的：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" blob 4448adbf7ecd394f42ae135bbeed9676e894af85    baz.txt\n040000 tree c68d233a33c5c06e0340e4c224f0afca87c8ce87    foo\n")])])]),a("p",[t._v("树本身会包含一些指向其他内容的指针，例如  "),a("code",[t._v("baz.txt")]),t._v(" (blob) 和  "),a("code",[t._v("foo")]),t._v(" (树)。如果我们用  "),a("code",[t._v("git cat-file -p 4448adbf7ecd394f42ae135bbeed9676e894af85")]),t._v("，即通过哈希值查看 baz.txt 的内容，会得到以下信息：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" is wonderful\n")])])]),a("h3",{attrs:{id:"_1-5-引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-引用"}},[t._v("#")]),t._v(" 1.5 引用")]),t._v(" "),a("p",[t._v("现在，所有的快照都可以通过它们的 SHA-1 哈希值来标记了。但这也太不方便了，谁也记不住一串 40 位的十六进制字符。")]),t._v(" "),a("p",[t._v("针对这一问题，Git 的解决方法是给这些哈希值赋予人类可读的名字，也就是引用（references）。引用是指向提交的指针。与对象不同的是，它是可变的（引用可以被更新，指向新的提交）。例如，"),a("code",[t._v("master")]),t._v("  引用通常会指向主分支的最新一次提交。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("references "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string, string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\ndef update_reference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name, "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n    references"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n\ndef read_reference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" references"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\ndef load_reference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name_or_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name_or_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" references:\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" load"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("references"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name_or_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    else:\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" load"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name_or_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这样，Git 就可以使用诸如 “master” 这样人类可读的名称来表示历史记录中某个特定的提交，而不需要在使用一长串十六进制字符了。")]),t._v(" "),a("p",[t._v("有一个细节需要我们注意， 通常情况下，我们会想要知道“我们当前所在位置”，并将其标记下来。这样当我们创建新的快照的时候，我们就可以知道它的相对位置（如何设置它的“父辈”）。在 Git 中，我们当前的位置有一个特殊的索引，它就是 “HEAD”。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-仓库"}},[t._v("#")]),t._v(" 1.6 仓库")]),t._v(" "),a("p",[t._v("最后，我们可以粗略地给出 Git 仓库的定义了："),a("code",[t._v("对象")]),t._v("  和  "),a("code",[t._v("引用")]),t._v("。")]),t._v(" "),a("p",[t._v("在硬盘上，Git 仅存储对象和引用：因为其数据模型仅包含这些东西。所有的  "),a("code",[t._v("git")]),t._v("  命令都对应着对提交树的操作，例如增加对象，增加或删除引用。")]),t._v(" "),a("p",[t._v("当您输入某个指令时，请思考一下这条命令是如何对底层的图数据结构进行操作的。另一方面，如果您希望修改提交树，例如“丢弃未提交的修改和将 ‘master’ 引用指向提交  "),a("code",[t._v("5d83f9e")]),t._v("  时，有什么命令可以完成该操作（针对这个具体问题，您可以使用  "),a("code",[t._v("git checkout master; git reset --hard 5d83f9e")]),t._v("）")]),t._v(" "),a("h2",{attrs:{id:"_2-暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-暂存区"}},[t._v("#")]),t._v(" 2. 暂存区")]),t._v(" "),a("p",[t._v("Git 中还包括一个和数据模型完全不相关的概念，但它确是创建提交的接口的一部分。")]),t._v(" "),a("p",[t._v("就上面介绍的快照系统来说，您也许会期望它的实现里包括一个 “创建快照” 的命令，该命令能够基于当前工作目录的当前状态创建一个全新的快照。有些版本控制系统确实是这样工作的，但 Git 不是。我们希望简洁的快照，而且每次从当前状态创建快照可能效果并不理想。例如，考虑如下场景，您开发了两个独立的特性，然后您希望创建两个独立的提交，其中第一个提交仅包含第一个特性，而第二个提交仅包含第二个特性。或者，假设您在调试代码时添加了很多打印语句，然后您仅仅希望提交和修复 bug 相关的代码而丢弃所有的打印语句。")]),t._v(" "),a("p",[t._v("Git 处理这些场景的方法是使用一种叫做 “暂存区（staging area）”的机制，它允许您指定下次快照中要包括那些改动。")]),t._v(" "),a("h2",{attrs:{id:"_3-git-的命令行接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-的命令行接口"}},[t._v("#")]),t._v(" 3. Git 的命令行接口")]),t._v(" "),a("h3",{attrs:{id:"_3-1-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-基础"}},[t._v("#")]),t._v(" 3.1 基础")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git help <command>")]),t._v(": 获取 git 命令的帮助信息")]),t._v(" "),a("li",[a("code",[t._v("git init")]),t._v(": 创建一个新的 git 仓库，其数据会存放在一个名为  "),a("code",[t._v(".git")]),t._v("  的目录下")]),t._v(" "),a("li",[a("code",[t._v("git status")]),t._v(": 显示当前的仓库状态")]),t._v(" "),a("li",[a("code",[t._v("git add <filename>")]),t._v(": 添加文件到暂存区")]),t._v(" "),a("li",[a("code",[t._v("git commit")]),t._v(": 创建一个新的提交\n"),a("ul",[a("li",[t._v("如何编写  "),a("a",{attrs:{href:"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("良好的提交信息"),a("OutboundLink")],1),t._v("!")]),t._v(" "),a("li",[t._v("为何要  "),a("a",{attrs:{href:"https://chris.beams.io/posts/git-commit/",target:"_blank",rel:"noopener noreferrer"}},[t._v("编写良好的提交信息"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("code",[t._v("git log")]),t._v(": 显示历史日志")]),t._v(" "),a("li",[a("code",[t._v("git log --all --graph --decorate")]),t._v(": 可视化历史记录（有向无环图） "),a("code",[t._v("--oneline")]),t._v(" 一行")]),t._v(" "),a("li",[a("code",[t._v("git diff <filename>")]),t._v(": 显示与暂存区文件的差异")]),t._v(" "),a("li",[a("code",[t._v("git diff <revision> <filename>")]),t._v(": 显示某个文件两个版本之间的差异")]),t._v(" "),a("li",[a("code",[t._v("git checkout <revision>")]),t._v(": 更新 HEAD 和目前的分支")]),t._v(" "),a("li",[a("code",[t._v("git checkout <filename>")]),t._v(": 把文件回到之前（HEAD）版本")])]),t._v(" "),a("h3",{attrs:{id:"_3-2-分支和合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-分支和合并"}},[t._v("#")]),t._v(" 3.2 分支和合并")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git branch")]),t._v(": 显示分支")]),t._v(" "),a("li",[a("code",[t._v("git branch <name>")]),t._v(": 创建分支")]),t._v(" "),a("li",[a("code",[t._v("git checkout -b <name>")]),t._v(": 创建分支并切换到该分支\n"),a("ul",[a("li",[t._v("相当于  "),a("code",[t._v("git branch <name>; git checkout <name>")])])])]),t._v(" "),a("li",[a("code",[t._v("git merge <revision>")]),t._v(": 合并到当前分支")]),t._v(" "),a("li",[a("code",[t._v("git mergetool")]),t._v(": 使用工具来处理合并冲突")]),t._v(" "),a("li",[a("code",[t._v("git rebase")]),t._v(": 将一系列补丁变基（rebase）为新的基线")])]),t._v(" "),a("h3",{attrs:{id:"_3-3-远端操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-远端操作"}},[t._v("#")]),t._v(" 3.3 远端操作")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git remote")]),t._v(": 列出远端")]),t._v(" "),a("li",[a("code",[t._v("git remote add <name> <url>")]),t._v(": 添加一个远端")]),t._v(" "),a("li",[a("code",[t._v("git push <remote> <local branch>:<remote branch>")]),t._v(": 将对象传送至远端并更新远端引用")]),t._v(" "),a("li",[a("code",[t._v("git branch --set-upstream-to=<remote>/<remote branch>")]),t._v(": 创建本地和远端分支的关联关系")]),t._v(" "),a("li",[a("code",[t._v("git fetch")]),t._v(": 从远端获取对象/索引")]),t._v(" "),a("li",[a("code",[t._v("git pull")]),t._v(": 相当于  "),a("code",[t._v("git fetch; git merge")])]),t._v(" "),a("li",[a("code",[t._v("git clone")]),t._v(": 从远端下载仓库")])]),t._v(" "),a("h3",{attrs:{id:"_3-4-撤销"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-撤销"}},[t._v("#")]),t._v(" 3.4 撤销")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git commit --amend")]),t._v(": 编辑提交的内容或信息")]),t._v(" "),a("li",[a("code",[t._v("git reset HEAD <file>")]),t._v(": 恢复暂存的文件")]),t._v(" "),a("li",[a("code",[t._v("git checkout -- <file>")]),t._v(": 丢弃修改")]),t._v(" "),a("li",[a("code",[t._v("git restore")]),t._v(": git2.32 版本后取代 git reset 进行许多撤销操作")])]),t._v(" "),a("h2",{attrs:{id:"_4-git-高级操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-git-高级操作"}},[t._v("#")]),t._v(" 4. Git 高级操作")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git config")]),t._v(": Git 是一个  "),a("a",{attrs:{href:"https://git-scm.com/docs/git-config",target:"_blank",rel:"noopener noreferrer"}},[t._v("高度可定制的"),a("OutboundLink")],1),t._v("  工具")]),t._v(" "),a("li",[a("code",[t._v("git clone --depth=1")]),t._v(": 浅克隆（shallow clone），不包括完整的版本历史信息")]),t._v(" "),a("li",[a("code",[t._v("git add -p")]),t._v(": 交互式暂存")]),t._v(" "),a("li",[a("code",[t._v("git rebase -i")]),t._v(": 交互式变基")]),t._v(" "),a("li",[a("code",[t._v("git blame")]),t._v(": 查看最后修改某行的人")]),t._v(" "),a("li",[a("code",[t._v("git stash")]),t._v(": 暂时移除工作目录下的修改内容")]),t._v(" "),a("li",[a("code",[t._v("git bisect")]),t._v(": 通过二分查找搜索历史记录")]),t._v(" "),a("li",[a("code",[t._v(".gitignore")]),t._v(": "),a("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("指定"),a("OutboundLink")],1),t._v("  故意不追踪的文件")])]),t._v(" "),a("h2",{attrs:{id:"_5-杂项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-杂项"}},[t._v("#")]),t._v(" 5. 杂项")]),t._v(" "),a("ul",[a("li",[t._v("图形用户界面: Git 的  "),a("a",{attrs:{href:"https://git-scm.com/downloads/guis",target:"_blank",rel:"noopener noreferrer"}},[t._v("图形用户界面客户端"),a("OutboundLink")],1),t._v("  有很多，但是我们自己并不使用这些图形用户界面的客户端，我们选择使用命令行接口")]),t._v(" "),a("li",[t._v("Shell 集成: 将 Git 状态集成到您的 shell 中会非常方便。("),a("a",{attrs:{href:"https://github.com/olivierverdier/zsh-git-prompt",target:"_blank",rel:"noopener noreferrer"}},[t._v("zsh"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://github.com/magicmonty/bash-git-prompt",target:"_blank",rel:"noopener noreferrer"}},[t._v("bash"),a("OutboundLink")],1),t._v(")。"),a("a",{attrs:{href:"https://github.com/ohmyzsh/ohmyzsh",target:"_blank",rel:"noopener noreferrer"}},[t._v("Oh My Zsh"),a("OutboundLink")],1),t._v("这样的框架中一般以及集成了这一功能")]),t._v(" "),a("li",[t._v("编辑器集成: 和上面一条类似，将 Git 集成到编辑器中好处多多。"),a("a",{attrs:{href:"https://github.com/tpope/vim-fugitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("fugitive.vim"),a("OutboundLink")],1),t._v("  是 Vim 中集成 GIt 的常用插件")]),t._v(" "),a("li",[t._v("工作流: 我们已经讲解了数据模型与一些基础命令，但还没讨论到进行大型项目时的一些惯例 ( 有"),a("a",{attrs:{href:"https://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[t._v("很多"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://www.endoflineblog.com/gitflow-considered-harmful",target:"_blank",rel:"noopener noreferrer"}},[t._v("不同的"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",target:"_blank",rel:"noopener noreferrer"}},[t._v("处理方法"),a("OutboundLink")],1),t._v(")")]),t._v(" "),a("li",[t._v("GitHub: Git 并不等同于 GitHub。 在 GitHub 中您需要使用一个被称作"),a("a",{attrs:{href:"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests",target:"_blank",rel:"noopener noreferrer"}},[t._v("拉取请求（pull request）"),a("OutboundLink")],1),t._v("的方法来向其他项目贡献代码")]),t._v(" "),a("li",[t._v("其他 Git 提供商: GitHub 并不是唯一的。还有像  "),a("a",{attrs:{href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab"),a("OutboundLink")],1),t._v("  和  "),a("a",{attrs:{href:"https://bitbucket.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BitBucket"),a("OutboundLink")],1),t._v("  这样的平台。")])]),t._v(" "),a("h2",{attrs:{id:"_6-资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-资源"}},[t._v("#")]),t._v(" 6. 资源")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pro Git"),a("OutboundLink")],1),t._v(" ，学习前五章的内容可以教会您流畅使用 Git 的绝大多数技巧，因为您已经理解了 Git 的数据模型。后面的章节提供了很多有趣的高级主题。（"),a("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pro Git 中文版"),a("OutboundLink")],1),t._v("）；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://ohshitgit.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Oh Shit, Git!?!"),a("OutboundLink")],1),t._v(" ，简短的介绍了如何从 Git 错误中恢复；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://eagain.net/articles/git-for-computer-scientists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git for Computer Scientists"),a("OutboundLink")],1),t._v(" ，简短的介绍了 Git 的数据模型，与本文相比包含较少量的伪代码以及大量的精美图片；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://jwiegley.github.io/git-from-the-bottom-up/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git from the Bottom Up"),a("OutboundLink")],1),t._v("详细的介绍了 Git 的实现细节，而不仅仅局限于数据模型。好奇的同学可以看看；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://smusamashah.github.io/blog/2017/10/14/explain-git-in-simple-words",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to explain git in simple words"),a("OutboundLink")],1),t._v("；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn Git Branching"),a("OutboundLink")],1),t._v("  通过基于浏览器的游戏来学习 Git ；")])]),t._v(" "),a("h2",{attrs:{id:"_7-exercise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-exercise"}},[t._v("#")]),t._v(" 7. Exercise")]),t._v(" "),a("h3",{attrs:{id:"_7-1-fork-本课程网站的仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-fork-本课程网站的仓库"}},[t._v("#")]),t._v(" 7.1 Fork "),a("a",{attrs:{href:"https://github.com/missing-semester-cn/missing-semester-cn.github.io.git",target:"_blank",rel:"noopener noreferrer"}},[t._v("本课程网站的仓库"),a("OutboundLink")],1)]),t._v(" "),a("ol",[a("li",[a("p",[t._v("将版本历史可视化并进行探索")]),t._v(" "),a("p",[a("img",{attrs:{src:e(358),alt:"Untitled"}})])]),t._v(" "),a("li",[a("p",[t._v("是谁最后修改了  "),a("code",[t._v("README.md")]),t._v("文件？（提示：使用  "),a("code",[t._v("git log")]),t._v("  命令并添加合适的参数）")]),t._v(" "),a("p",[a("img",{attrs:{src:e(359),alt:"Untitled"}})])]),t._v(" "),a("li",[a("p",[t._v("最后一次修改"),a("code",[t._v("_config.yml")]),t._v("  文件中  "),a("code",[t._v("collections:")]),t._v("  行时的提交信息是什么？（提示：使用  "),a("code",[t._v("git blame")]),t._v("  和  "),a("code",[t._v("git show")]),t._v("）")]),t._v(" "),a("p",[a("img",{attrs:{src:e(360),alt:"Untitled"}})])])]),t._v(" "),a("h3",{attrs:{id:"_7-2-从-git-历史中删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-从-git-历史中删除"}},[t._v("#")]),t._v(" 7.2 从 Git 历史中删除")]),t._v(" "),a("p",[t._v("使用 Git 时的一个常见错误是提交本不应该由 Git 管理的大文件，或是将含有敏感信息的文件提交给 Git 。尝试向仓库中添加一个文件并添加提交信息，然后将其从历史中删除 ( "),a("a",{attrs:{href:"https://help.github.com/articles/removing-sensitive-data-from-a-repository/",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇文章也许会有帮助"),a("OutboundLink")],1),t._v(")；")]),t._v(" "),a("p",[t._v("从历史记录中删除文件")]),t._v(" "),a("p",[t._v("要从历史记录中彻底删除 "),a("code",[t._v("secret.txt")]),t._v(" 文件，你可以使用 "),a("code",[t._v("git filter-branch")]),t._v(" 命令或更新的 "),a("code",[t._v("git filter-repo")]),t._v("。"),a("code",[t._v("git filter-repo")]),t._v(" 是 "),a("code",[t._v("git filter-branch")]),t._v(" 的替代品，效率更高但需要单独安装。这里我将展示使用 "),a("code",[t._v("git filter-branch")]),t._v(" 的方法，因为它不需要额外安装。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("使用 "),a("code",[t._v("git filter-branch")]),t._v(" 删除文件：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" filter-branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--force")]),t._v(" --index-filter "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git rm --cached --ignore-unmatch secret.txt"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--prune-empty --tag-name-filter "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -- "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("-force")]),t._v(": 强制运行，覆盖备份。")]),t._v(" "),a("li",[a("code",[t._v("-index-filter")]),t._v(": 对每个修订版本使用的过滤器，这里用于删除 "),a("code",[t._v("secret.txt")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("git rm --cached --ignore-unmatch secret.txt")]),t._v(": 删除指定的文件，即使它在某些修订版本中不存在。")]),t._v(" "),a("li",[a("code",[t._v("-prune-empty")]),t._v(": 删除因为文件删除而变成空的提交。")]),t._v(" "),a("li",[a("code",[t._v("-tag-name-filter cat")]),t._v(": 保留标签名称不变。")]),t._v(" "),a("li",[a("code",[t._v("-all")]),t._v(": 应用于所有分支和标签。")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(361),alt:"Untitled"}})]),t._v(" "),a("p",[a("img",{attrs:{src:e(362),alt:"Untitled"}})])]),t._v(" "),a("li",[a("p",[t._v("推送更改到远程仓库：")]),t._v(" "),a("p",[t._v("删除文件后，你需要强制推送更改到远程仓库，因为这是一次重写历史的操作：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--force")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v("\n")])])]),a("p",[t._v("这会强制更新所有分支到远程仓库。")])]),t._v(" "),a("li",[a("p",[t._v("清理和回收空间：")]),t._v(" "),a("p",[t._v("在本地，运行以下命令来清理 Git 对象并回收空间：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" for-each-ref "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--format")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"delete %(refname)"')]),t._v(" refs/original "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" update-ref "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--stdin")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog expire "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--expire")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" gc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--prune")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("now\n")])])]),a("p",[a("img",{attrs:{src:e(363),alt:"Untitled"}})])])]),t._v(" "),a("h3",{attrs:{id:"_7-3-git-stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-git-stash"}},[t._v("#")]),t._v(" 7.3 git stash")]),t._v(" "),a("p",[t._v("从 GitHub 上克隆某个仓库，修改一些文件。当您使用  "),a("code",[t._v("git stash")]),t._v("  会发生什么？当您执行  "),a("code",[t._v("git log --all --oneline")]),t._v("  时会显示什么？通过  "),a("code",[t._v("git stash pop")]),t._v("  命令来撤销  "),a("code",[t._v("git stash")]),t._v("  操作，什么时候会用到这一技巧？")]),t._v(" "),a("p",[a("img",{attrs:{src:e(364),alt:"Untitled"}})]),t._v(" "),a("p",[a("img",{attrs:{src:e(365),alt:"Untitled"}})]),t._v(" "),a("p",[t._v("执行"),a("code",[t._v("git stash")]),t._v("后，添加到暂存区的内容不会再提示需要提交(Changes to be committed)。而且，尽管执行"),a("code",[t._v("git stash")]),t._v("使得提交记录新增了两项，但是可以发现"),a("code",[t._v("HEAD")]),t._v("引用并没有变动。")]),t._v(" "),a("p",[t._v("当我们将改动添加到暂存区（"),a("code",[t._v("git add")]),t._v("）后，通过执行"),a("code",[t._v("git stash")]),t._v("后，可以自由地切换到其他分支（注意：在暂存区存有改动时，切换分支("),a("code",[t._v("checkout")]),t._v(")是不被允许的）")]),t._v(" "),a("p",[t._v("另外，运用"),a("code",[t._v("stash")]),t._v("和"),a("code",[t._v("stash pop")]),t._v("，可以自由选择  "),a("em",[t._v("stash 存储的改动")]),t._v("  即将提交到的分支")]),t._v(" "),a("h3",{attrs:{id:"_7-4-gitconfig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-gitconfig"}},[t._v("#")]),t._v(" 7.4 .gitconfig")]),t._v(" "),a("p",[t._v("与其他的命令行工具一样，Git 也提供了一个名为 ~/.gitconfig 配置文件 (或 dotfile)。请在 ~/.gitconfig 中创建一个别名，使您在运行 git graph 时，您可以得到 git log –all –graph –decorate –oneline 的输出结果；")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    graph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--graph")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--decorate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:e(366),alt:"Untitled"}})]),t._v(" "),a("h3",{attrs:{id:"_7-5-gitignore-global"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-gitignore-global"}},[t._v("#")]),t._v(" 7.5 .gitignore_global")]),t._v(" "),a("p",[t._v("您可以通过执行 git config –global core.excludesfile ~/.gitignore_global 在 ~/.gitignore_global 中创建全局忽略规则。配置您的全局 gitignore 文件来自动忽略系统或编辑器的临时文件，例如 .DS_Store；")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" core.excludesfile ~/.gitignore .DS_Store\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);