(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{347:function(s,a,t){s.exports=t.p+"assets/img/2Untitled.a0446167.png"},348:function(s,a,t){s.exports=t.p+"assets/img/2Untitled1.27be85d1.png"},349:function(s,a,t){s.exports=t.p+"assets/img/22.d7d4f076.png"},350:function(s,a,t){s.exports=t.p+"assets/img/23.5d2a18d3.png"},351:function(s,a,t){s.exports=t.p+"assets/img/24.ef298398.png"},352:function(s,a,t){s.exports=t.p+"assets/img/25.292bd7a3.png"},437:function(s,a,t){"use strict";t.r(a);var e=t(14),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_2024-03-19-2-script"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2024-03-19-2-script"}},[s._v("#")]),s._v(" 2024.03.19-2. Script")]),s._v(" "),a("h1",{attrs:{id:"_1-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-shell"}},[s._v("#")]),s._v(" 1. Shell")]),s._v(" "),a("h2",{attrs:{id:"_1-1-变量赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-变量赋值"}},[s._v("#")]),s._v(" 1.1 变量赋值")]),s._v(" "),a("p",[s._v("在 bash 中为变量赋值的语法是 "),a("code",[s._v("foo=bar")]),s._v(" ，访问变量中存储的数值，其语法为  "),a("code",[s._v("$foo")]),s._v("。 需要注意的是，"),a("code",[s._v("foo = bar")]),s._v(" （使用空格隔开）是不能正确工作的，因为解释器会调用程序"),a("code",[s._v("foo")]),s._v("  并将  "),a("code",[s._v("=")]),s._v("  和  "),a("code",[s._v("bar")]),s._v("作为参数。 总的来说，在 shell 脚本中使用空格会起到分割参数的作用，有时候可能会造成混淆，请务必多加检查。")]),s._v(" "),a("p",[s._v("Bash 中的字符串通过"),a("code",[s._v("'")]),s._v("  和  "),a("code",[s._v('"')]),s._v("分隔符来定义，但是它们的含义并不相同。以"),a("code",[s._v("'")]),s._v("定义的字符串为原义字符串，其中的变量不会被转义，而  "),a("code",[s._v('"')]),s._v("定义的字符串会将变量值进行替换。")]),s._v(" "),a("p",[a("img",{attrs:{src:t(347),alt:"Untitled"}})]),s._v(" "),a("h2",{attrs:{id:"_1-2-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-函数"}},[s._v("#")]),s._v(" 1.2 函数")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("// mcd.sh\n// 创建一个文件夹并使用cd进入该文件夹。\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("mcd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("这里  "),a("code",[s._v("$1")]),s._v("  是脚本的第一个参数。与其他脚本语言不同的是，bash 使用了很多特殊的变量来表示参数、错误代码和相关变量。下面列举了其中一些变量，更完整的列表可以参考  "),a("a",{attrs:{href:"https://www.tldp.org/LDP/abs/html/special-chars.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("$0")]),s._v(" - 脚本名")]),s._v(" "),a("li",[a("code",[s._v("$1")]),s._v("  到  "),a("code",[s._v("$9")]),s._v(" - 脚本的参数。 "),a("code",[s._v("$1")]),s._v("  是第一个参数，依此类推。")]),s._v(" "),a("li",[a("code",[s._v("$@")]),s._v(" - 所有参数")]),s._v(" "),a("li",[a("code",[s._v("$#")]),s._v(" - 参数个数")]),s._v(" "),a("li",[a("code",[s._v("$?")]),s._v(" - 前一个命令的返回值")]),s._v(" "),a("li",[a("code",[s._v("$$")]),s._v(" - 当前脚本的进程识别码")]),s._v(" "),a("li",[a("code",[s._v("!!")]),s._v(" - 完整的上一条命令，包括参数。常见应用：当你因为权限不足执行命令失败时，可以使用  "),a("code",[s._v("sudo !!")]),s._v("再尝试一次。")]),s._v(" "),a("li",[a("code",[s._v("$_")]),s._v(" - 上一条命令的最后一个参数。如果你正在使用的是交互式 shell，你可以通过按下  "),a("code",[s._v("Esc")]),s._v("  之后键入 . 来获取这个值。")])]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("source mcd.sh")]),s._v(" 会将 mcd 函数加载进来，后面可以直接调用")]),s._v(" "),a("h2",{attrs:{id:"_1-3-返回码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-返回码"}},[s._v("#")]),s._v(" 1.3 返回码")]),s._v(" "),a("p",[s._v("命令通常使用  "),a("code",[s._v("STDOUT")]),s._v("来返回输出值，使用"),a("code",[s._v("STDERR")]),s._v("  来返回错误及错误码，便于脚本以更加友好的方式报告错误。 返回码或退出状态是脚本/命令之间交流执行状态的方式。返回值 0 表示正常执行，其他所有非 0 的返回值都表示有错误发生。")]),s._v(" "),a("p",[s._v("退出码可以搭配  "),a("code",[s._v("&&")]),s._v("（与操作符）和  "),a("code",[s._v("||")]),s._v("（或操作符）使用，用来进行条件判断，决定是否执行其他程序。它们都属于短路"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Short-circuit_evaluation",target:"_blank",rel:"noopener noreferrer"}},[s._v("运算符"),a("OutboundLink")],1),s._v("（short-circuiting） 同一行的多个命令可以用  "),a("code",[s._v(";")]),s._v("  分隔。程序  "),a("code",[s._v("true")]),s._v("  的返回码永远是"),a("code",[s._v("0")]),s._v("，"),a("code",[s._v("false")]),s._v("  的返回码永远是"),a("code",[s._v("1")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Oops, fail"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Oops, fail")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Will not be printed"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Things went well"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Things went well")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Will not be printed"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This will always run"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This will always run")]),s._v("\n")])])]),a("p",[s._v("另一个常见的模式是以变量的形式获取一个命令的输出，这可以通过  "),a("em",[s._v("命令替换")]),s._v("（"),a("em",[s._v("command substitution")]),s._v("）实现。")]),s._v(" "),a("p",[s._v("当您通过  "),a("code",[s._v("$( CMD )")]),s._v("  这样的方式来执行"),a("code",[s._v("CMD")]),s._v("  这个命令时，它的输出结果会替换掉  "),a("code",[s._v("$( CMD )")]),s._v(" 。例如，如果执行  "),a("code",[s._v("for file in $(ls)")]),s._v(" ，shell 首先将调用"),a("code",[s._v("ls")]),s._v(" ，然后遍历得到的这些返回值。还有一个冷门的类似特性是  "),a("em",[s._v("进程替换")]),s._v("（"),a("em",[s._v("process substitution")]),s._v("）， "),a("code",[s._v("<( CMD )")]),s._v("  会执行  "),a("code",[s._v("CMD")]),s._v("  并将结果输出到一个临时文件中，并将  "),a("code",[s._v("<( CMD )")]),s._v("  替换成临时文件名。这在我们希望返回值通过文件而不是 STDIN 传递时很有用。例如， "),a("code",[s._v("diff <(ls foo) <(ls bar)")]),s._v("  会显示文件夹  "),a("code",[s._v("foo")]),s._v("  和  "),a("code",[s._v("bar")]),s._v("  中文件的区别。")]),s._v(" "),a("p",[s._v("说了很多，现在该看例子了，下面这个例子展示了一部分上面提到的特性。这段脚本会遍历我们提供的参数，使用"),a("code",[s._v("grep")]),s._v("  搜索字符串  "),a("code",[s._v("foobar")]),s._v("，如果没有找到，则将其作为注释追加到文件中。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Starting program at '),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# date会被替换成日期和时间")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Running program '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v(" with "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(" arguments with pid "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$$")]),s._v('"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("file")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" foobar "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /dev/null "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v(" /dev/null\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果模式没有找到，则grep退出状态为 1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 我们将标准输出流和标准错误流重定向到Null，因为我们并不关心这些信息")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ne")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v(' does not have any foobar, adding one"')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"# foobar"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v('"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("p",[s._v("在条件语句中，我们比较  "),a("code",[s._v("$?")]),s._v("  是否等于 0。 Bash 实现了许多类似的比较操作，您可以查看  "),a("code",[s._v("[test 手册](https://man7.org/linux/man-pages/man1/test.1.html)")]),s._v("。 在 bash 中进行比较时，尽量使用双方括号  "),a("code",[s._v("[[ ]]")]),s._v("  而不是单方括号  "),a("code",[s._v("[ ]")]),s._v("，这样会降低犯错的几率，尽管这样并不能兼容  "),a("code",[s._v("sh")]),s._v("。 更详细的说明参见"),a("a",{attrs:{href:"http://mywiki.wooledge.org/BashFAQ/031",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"_1-4-通配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-通配"}},[s._v("#")]),s._v(" 1.4 通配")]),s._v(" "),a("p",[s._v("当执行脚本时，我们经常需要提供形式类似的参数。bash 使我们可以轻松的实现这一操作，它可以基于文件扩展名展开表达式。这一技术被称为 shell 的  "),a("em",[s._v("通配")]),s._v("（"),a("em",[s._v("globbing")]),s._v("）")]),s._v(" "),a("ul",[a("li",[s._v("通配符 - 当你想要利用通配符进行匹配时，你可以分别使用  "),a("code",[s._v("?")]),s._v("  和  "),a("code",[s._v("*")]),s._v(" 来匹配一个或任意个字符。例如，对于文件"),a("code",[s._v("foo")]),s._v(", "),a("code",[s._v("foo1")]),s._v(", "),a("code",[s._v("foo2")]),s._v(", "),a("code",[s._v("foo10")]),s._v("  和  "),a("code",[s._v("bar")]),s._v(", "),a("code",[s._v("rm foo?")]),s._v("这条命令会删除"),a("code",[s._v("foo1")]),s._v("  和  "),a("code",[s._v("foo2")]),s._v(" ，而"),a("code",[s._v("rm foo*")]),s._v("  则会删除除了"),a("code",[s._v("bar")]),s._v("之外的所有文件。")]),s._v(" "),a("li",[s._v("花括号"),a("code",[s._v("{}")]),s._v(" - 当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("convert image."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("png,jpg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会展开为")]),s._v("\nconvert image.png image.jpg\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" /path/to/project/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("foo,bar,baz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(".sh /newpath\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会展开为")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 也可以结合通配使用")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(".py,.sh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" folder\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会移动所有 *.py 和 *.sh 文件")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" foo bar\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 下面命令会创建foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h这些文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("foo,bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" foo/x bar/y\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比较文件夹 foo 和 bar 中包含文件的不同")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# < x")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ---")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# > y")]),s._v("\n")])])]),a("h2",{attrs:{id:"_1-5-shebang"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-shebang"}},[s._v("#")]),s._v(" 1.5 shebang")]),s._v(" "),a("p",[s._v("脚本并不一定只有用 bash 写才能在终端里调用。比如说，这是一段 Python 脚本，作用是将输入的参数倒序输出：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("*"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/local/bin/python  //* #!/usr/bin/env python")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" sys\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("arg")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" reversed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sys.argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("内核知道去用 python 解释器而不是 shell 命令来运行这段脚本，是因为脚本的开头第一行的  "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Shebang_(Unix)",target:"_blank",rel:"noopener noreferrer"}},[s._v("shebang"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("在  "),a("code",[s._v("shebang")]),s._v("  行中使用  "),a("code",[s._v("[env](https://man7.org/linux/man-pages/man1/env.1.html)")]),s._v("  命令是一种好的实践，它会利用环境变量中的程序来解析该脚本，这样就提高了您的脚本的可移植性。"),a("code",[s._v("env")]),s._v("  会利用我们第一节讲座中介绍过的"),a("code",[s._v("PATH")]),s._v("  环境变量来进行定位。 例如，使用了"),a("code",[s._v("env")]),s._v("的 shebang 看上去是这样的"),a("code",[s._v("#!/usr/bin/env python")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"_1-6-shell-函数和脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-shell-函数和脚本"}},[s._v("#")]),s._v(" 1.6 shell 函数和脚本")]),s._v(" "),a("p",[s._v("shell 函数和脚本有如下一些不同点：")]),s._v(" "),a("ul",[a("li",[s._v("函数只能与 shell 使用相同的语言，脚本可以使用任意语言。因此在脚本中包含  "),a("code",[s._v("shebang")]),s._v("  是很重要的。")]),s._v(" "),a("li",[s._v("函数仅在定义时被加载，脚本会在每次被执行时加载。这让函数的加载比脚本略快一些，但每次修改函数定义，都要重新加载一次。")]),s._v(" "),a("li",[s._v("函数会在当前的 shell 环境中执行，脚本会在单独的进程中执行。因此，函数可以对环境变量进行更改，比如改变当前工作目录，脚本则不行。脚本需要使用  "),a("code",[s._v("[export](https://man7.org/linux/man-pages/man1/export.1p.html)")]),s._v("  将环境变量导出，并将值传递给环境变量。")]),s._v(" "),a("li",[s._v("与其他程序语言一样，函数可以提高代码模块性、代码复用性并创建清晰性的结构。shell 脚本中往往也会包含它们自己的函数定义。")])]),s._v(" "),a("h2",{attrs:{id:"_1-7-shellcheck"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-shellcheck"}},[s._v("#")]),s._v(" 1.7  shellcheck")]),s._v(" "),a("p",[s._v("编写  "),a("code",[s._v("bash")]),s._v("  脚本有时候会很别扭和反直觉。例如  "),a("a",{attrs:{href:"https://github.com/koalaman/shellcheck",target:"_blank",rel:"noopener noreferrer"}},[s._v("shellcheck"),a("OutboundLink")],1),s._v("  这样的工具可以帮助你定位 sh/bash 脚本中的错误。")]),s._v(" "),a("h1",{attrs:{id:"_2-shell-工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-shell-工具"}},[s._v("#")]),s._v(" 2. Shell 工具")]),s._v(" "),a("h2",{attrs:{id:"_2-1-查看命令如何使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-查看命令如何使用"}},[s._v("#")]),s._v(" 2.1 查看命令如何使用")]),s._v(" "),a("p",[s._v("看到这里，您可能会有疑问，我们应该如何为特定的命令找到合适的标记呢？例如  "),a("code",[s._v("ls -l")]),s._v(", "),a("code",[s._v("mv -i")]),s._v("  和  "),a("code",[s._v("mkdir -p")]),s._v("。更普遍的是，给您一个命令行，您应该怎样了解如何使用这个命令行并找出它的不同的选项呢？ 一般来说，您可能会先去网上搜索答案，但是，UNIX 可比 StackOverflow 出现的早，因此我们的系统里其实早就包含了可以获取相关信息的方法。")]),s._v(" "),a("p",[s._v("在上一节中我们介绍过，最常用的方法是为对应的命令行添加"),a("code",[s._v("-h")]),s._v("  或  "),a("code",[s._v("--help")]),s._v("  标记。另外一个更详细的方法则是使用"),a("code",[s._v("man")]),s._v("  命令。"),a("code",[s._v("[man](https://man7.org/linux/man-pages/man1/man.1.html)")]),s._v("  命令是手册（manual）的缩写，它提供了命令的用户手册。")]),s._v(" "),a("p",[s._v("例如，"),a("code",[s._v("man rm")]),s._v("  会输出命令  "),a("code",[s._v("rm")]),s._v("  的说明，同时还有其标记列表，包括之前我们介绍过的"),a("code",[s._v("-i")]),s._v("。 事实上，目前我们给出的所有命令的说明链接，都是网页版的 Linux 命令手册。即使是您安装的第三方命令，前提是开发者编写了手册并将其包含在了安装包中。在交互式的、基于字符处理的终端窗口中，一般也可以通过  "),a("code",[s._v(":help")]),s._v("  命令或键入  "),a("code",[s._v("?")]),s._v("  来获取帮助。")]),s._v(" "),a("p",[s._v("有时候手册内容太过详实，让我们难以在其中查找哪些最常用的标记和语法。 "),a("a",{attrs:{href:"https://tldr.sh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("TLDR pages"),a("OutboundLink")],1),s._v("  是一个很不错的替代品，它提供了一些案例，可以帮助您快速找到正确的选项。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("snap "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" tldr  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# in Ubuntu")]),s._v("\n")])])]),a("h2",{attrs:{id:"_2-2-查找文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-查找文件"}},[s._v("#")]),s._v(" 2.2 查找文件")]),s._v(" "),a("p",[s._v("程序员们面对的最常见的重复任务就是查找文件或目录。所有的类 UNIX 系统都包含一个名为  "),a("code",[s._v("[find](https://man7.org/linux/man-pages/man1/find.1.html)")]),s._v("  的工具，它是 shell 上用于查找文件的绝佳工具。"),a("code",[s._v("find")]),s._v("命令会递归地搜索符合条件的文件，例如：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有名称为src的文件夹")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),s._v(" src "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-type")]),s._v(" d\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找前一天修改的所有文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-mtime")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有大小在500k至10M的tar.gz文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-size")]),s._v(" +500k "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-size")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-10M")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.tar.gz'")]),s._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有文件夹路径中包含test的python文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-path")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/test/*.py'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-type")]),s._v(" f\n")])])]),a("ol",[a("li",[a("code",[s._v("find .")]),s._v("：这个命令从当前目录（"),a("code",[s._v(".")]),s._v("代表当前目录）开始递归搜索。")]),s._v(" "),a("li",[a("code",[s._v("path '/test/*.py'")]),s._v("：这部分指定了搜索的路径模式：\n"),a("ul",[a("li",[s._v("``：这个模式匹配零个或多个目录；在"),a("code",[s._v("/test/\\*.py")]),s._v("中，它表示可以匹配任何深度的目录层级，直到遇到"),a("code",[s._v("test")]),s._v("目录。")]),s._v(" "),a("li",[a("code",[s._v("test")]),s._v("是一个具体的目录名，表示在任何可能的位置中寻找名为"),a("code",[s._v("test")]),s._v("的目录。")]),s._v(" "),a("li",[a("code",[s._v(".py")]),s._v("：这个模式匹配所有以"),a("code",[s._v(".py")]),s._v("结尾的文件，即 Python 脚本文件。")])])]),s._v(" "),a("li",[a("code",[s._v("type f")]),s._v("：这个参数告诉"),a("code",[s._v("find")]),s._v("命令只关心文件（"),a("code",[s._v("f")]),s._v("代表文件），不要在结果中包括目录或其他类型的文件系统对象。")])]),s._v(" "),a("p",[s._v("除了列出所寻找的文件之外，find 还能对所有查找到的文件进行操作。这能极大地简化一些单调的任务。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("*"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除全部扩展名为.tmp 的文件*")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.tmp'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n*"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找全部的 PNG 文件并将其转换为 JPG*")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.png'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-exec")]),s._v(" convert "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(".jpg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("这段代码是一个在 Unix 或类 Unix 系统中使用的 shell 命令，用于查找当前目录及其子目录中所有的"),a("code",[s._v(".png")]),s._v("文件，并将每个找到的文件转换为"),a("code",[s._v(".jpg")]),s._v("格式。这里一步一步解释这个命令：")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("find . -name '*.png'")]),s._v("：这个命令从当前目录（"),a("code",[s._v(".")]),s._v("代表当前目录）开始递归搜索所有扩展名为"),a("code",[s._v(".png")]),s._v("的文件。"),a("code",[s._v("name '*.png'")]),s._v("指定了要匹配的文件名模式，星号``是一个通配符，表示任意数量的任意字符。")]),s._v(" "),a("li",[a("code",[s._v("exec convert {} {}.jpg \\;")]),s._v("：这部分指定了"),a("code",[s._v("find")]),s._v("命令找到每个文件后要执行的操作。"),a("code",[s._v("exec")]),s._v("后面跟的是要执行的命令，这里使用"),a("code",[s._v("convert")]),s._v("命令来转换图像格式。\n"),a("ul",[a("li",[a("code",[s._v("convert")]),s._v("：这是 ImageMagick 工具集中的一个命令，用于转换图像格式。")]),s._v(" "),a("li",[a("code",[s._v("{}")]),s._v("：这是一个特殊的占位符，对于每个匹配的文件，"),a("code",[s._v("find")]),s._v("命令都会在这个位置插入文件的路径。")]),s._v(" "),a("li",[a("code",[s._v("{}.jpg")]),s._v("：这指定了输出文件的名称。对于每个输入文件，这会在原文件名（即"),a("code",[s._v("{}")]),s._v("）后添加"),a("code",[s._v(".jpg")]),s._v("扩展名，创建一个新的文件名。")]),s._v(" "),a("li",[a("code",[s._v("\\;")]),s._v("：这个分号表示"),a("code",[s._v("exec")]),s._v("参数的结束，并且需要转义（"),a("code",[s._v("\\;")]),s._v("）来避免被 shell 解释。")])])])]),s._v(" "),a("p",[s._v("尽管  "),a("code",[s._v("find")]),s._v("  用途广泛，它的语法却比较难以记忆。例如，为了查找满足模式  "),a("code",[s._v("PATTERN")]),s._v("  的文件，您需要执行  "),a("code",[s._v("find -name '*PATTERN*'")]),s._v(" (如果您希望模式匹配时是不区分大小写，可以使用"),a("code",[s._v("-iname")]),s._v("选项）")]),s._v(" "),a("p",[s._v("您当然可以使用 alias 设置别名来简化上述操作，但 shell 的哲学之一便是寻找（更好用的）替代方案。 记住，shell 最好的特性就是您只是在调用程序，因此您只要找到合适的替代程序即可（甚至自己编写）。")]),s._v(" "),a("p",[s._v("例如，"),a("code",[s._v("[fd](https://github.com/sharkdp/fd)")]),s._v("  就是一个更简单、更快速、更友好的程序，它可以用来作为"),a("code",[s._v("find")]),s._v("的替代品。它有很多不错的默认设置，例如输出着色、默认支持正则匹配、支持 unicode 并且我认为它的语法更符合直觉。以模式"),a("code",[s._v("PATTERN")]),s._v("  搜索的语法是  "),a("code",[s._v("fd PATTERN")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" fdfind\n")])])]),a("p",[s._v("下面是关于如何使用 "),a("code",[s._v("fd")]),s._v(" 以及一些实际的例子：")]),s._v(" "),a("h3",{attrs:{id:"fd-基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fd-基本用法"}},[s._v("#")]),s._v(" "),a("code",[s._v("fd")]),s._v(" 基本用法")]),s._v(" "),a("ul",[a("li",[s._v("查找文件：输入 "),a("code",[s._v("fd")]),s._v(" 后跟你要搜索的文件名或模式，它会在当前目录及其子目录下查找匹配的文件。例如，要查找所有的 "),a("code",[s._v(".txt")]),s._v(" 文件，你可以使用："),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("fd "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\.txt$'")]),s._v("\n")])])])]),s._v(" "),a("li",[s._v("指定搜索目录：你可以在命令中指定一个特定的目录来让 "),a("code",[s._v("fd")]),s._v(" 在其中搜索。例如，要在 "),a("code",[s._v("~/Documents")]),s._v(" 目录中搜索 "),a("code",[s._v(".pdf")]),s._v(" 文件："),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("fd "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\.pdf$'")]),s._v(" ~/Documents\n")])])])])]),s._v(" "),a("h3",{attrs:{id:"fd-高级用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fd-高级用法"}},[s._v("#")]),s._v(" "),a("code",[s._v("fd")]),s._v(" 高级用法")]),s._v(" "),a("ul",[a("li",[s._v("忽略大小写："),a("code",[s._v("fd")]),s._v(" 默认使用智能大小写搜索。如果你想强制执行不区分大小写的搜索，可以使用 "),a("code",[s._v("i")]),s._v(" 选项。例如，查找所有的 "),a("code",[s._v("README")]),s._v(" 文件（不区分大小写）："),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("fd "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'readme'")]),s._v("\n")])])])]),s._v(" "),a("li",[s._v("使用正则表达式："),a("code",[s._v("fd")]),s._v(" 支持正则表达式，让你可以进行更复杂的搜索。例如，查找所有以 "),a("code",[s._v("a")]),s._v(" 开头，以 "),a("code",[s._v("z")]),s._v(" 结尾的文件："),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("fd "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^a.*z$'")]),s._v("\n")])])])]),s._v(" "),a("li",[s._v("排除特定目录：如果你想在搜索中排除特定的目录，可以使用 "),a("code",[s._v("E")]),s._v(" 选项。例如，搜索所有 "),a("code",[s._v(".js")]),s._v(" 文件，但排除掉 "),a("code",[s._v("node_modules")]),s._v(" 目录："),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("fd "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\.js$'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" node_modules\n")])])])]),s._v(" "),a("li",[s._v("输出搜索结果到其他命令："),a("code",[s._v("fd")]),s._v(" 的输出可以通过管道传递给其他命令。例如，你可以使用 "),a("code",[s._v("xargs")]),s._v(" 结合 "),a("code",[s._v("fd")]),s._v(" 来对找到的文件执行操作。下面的命令将找到所有 "),a("code",[s._v(".tmp")]),s._v(" 文件并删除它们："),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("fd "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\.tmp$'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("\n")])])])])]),s._v(" "),a("h3",{attrs:{id:"fd-实用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fd-实用示例"}},[s._v("#")]),s._v(" "),a("code",[s._v("fd")]),s._v(" 实用示例")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("快速查找特定文件：如果你想找到所有的 JPEG 图片文件，可以使用如下命令：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("fd "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\.jpg$'")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[s._v("在特定目录下搜索：如果你需要在 "),a("code",[s._v("/var/log")]),s._v(" 目录下查找扩展名为 "),a("code",[s._v(".log")]),s._v(" 的文件，可以使用：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("fd "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\.log$'")]),s._v(" /var/lo\n")])])])])]),s._v(" "),a("p",[s._v("大多数人都认为  "),a("code",[s._v("find")]),s._v("  和  "),a("code",[s._v("fd")]),s._v("  已经很好用了，但是有的人可能想知道，我们是不是可以有更高效的方法，例如不要每次都搜索文件而是通过编译索引或建立数据库的方式来实现更加快速地搜索。")]),s._v(" "),a("p",[s._v("这就要靠  "),a("code",[s._v("[locate](https://man7.org/linux/man-pages/man1/locate.1.html)")]),s._v("  了。 "),a("code",[s._v("locate")]),s._v("  使用一个由  "),a("code",[s._v("[updatedb](https://man7.org/linux/man-pages/man1/updatedb.1.html)")]),s._v("负责更新的数据库，在大多数系统中  "),a("code",[s._v("updatedb")]),s._v("  都会通过  "),a("code",[s._v("[cron](https://man7.org/linux/man-pages/man8/cron.8.html)")]),s._v("  每日更新。这便需要我们在速度和时效性之间作出权衡。而且，"),a("code",[s._v("find")]),s._v("  和类似的工具可以通过别的属性比如文件大小、修改时间或是权限来查找文件，"),a("code",[s._v("locate")]),s._v("则只能通过文件名。 "),a("a",{attrs:{href:"https://unix.stackexchange.com/questions/60205/locate-vs-find-usage-pros-and-cons-of-each-other",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),a("OutboundLink")],1),s._v("有一个更详细的对比。")]),s._v(" "),a("h2",{attrs:{id:"_2-3-查找代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-查找代码"}},[s._v("#")]),s._v(" 2.3 查找代码")]),s._v(" "),a("p",[s._v("查找文件是很有用的技能，但是很多时候您的目标其实是查看文件的内容。一个最常见的场景是您希望查找具有某种模式的全部文件，并找它们的位置。")]),s._v(" "),a("p",[s._v("为了实现这一点，很多类 UNIX 的系统都提供了"),a("code",[s._v("[grep](https://man7.org/linux/man-pages/man1/grep.1.html)")]),s._v("命令，它是用于对输入文本进行匹配的通用工具。它是一个非常重要的 shell 工具，我们会在后续的数据清理课程中深入的探讨它。")]),s._v(" "),a("p",[a("code",[s._v("grep")]),s._v("  有很多选项，这也使它成为一个非常全能的工具。其中我经常使用的有  "),a("code",[s._v("-C")]),s._v(" ：获取查找结果的上下文（Context）；"),a("code",[s._v("-v")]),s._v("  将对结果进行反选（Invert），也就是输出不匹配的结果。举例来说， "),a("code",[s._v("grep -C 5")]),s._v("  会输出匹配结果前后五行。当需要搜索大量文件的时候，使用  "),a("code",[s._v("-R")]),s._v("  会递归地进入子目录并搜索所有的文本文件。")]),s._v(" "),a("p",[s._v("但是，我们有很多办法可以对  "),a("code",[s._v("grep -R")]),s._v("  进行改进，例如使其忽略"),a("code",[s._v(".git")]),s._v("  文件夹，使用多 CPU 等等。")]),s._v(" "),a("p",[s._v("因此也出现了很多它的替代品，包括  "),a("a",{attrs:{href:"https://beyondgrep.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("ack"),a("OutboundLink")],1),s._v(", "),a("a",{attrs:{href:"https://github.com/ggreer/the_silver_searcher",target:"_blank",rel:"noopener noreferrer"}},[s._v("ag"),a("OutboundLink")],1),s._v("  和  "),a("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep",target:"_blank",rel:"noopener noreferrer"}},[s._v("rg"),a("OutboundLink")],1),s._v("。它们都特别好用，但是功能也都差不多，我比较常用的是 ripgrep ("),a("code",[s._v("rg")]),s._v(") ，因为它速度快，而且用法非常符合直觉。例子如下：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有使用了 requests 库的文件")]),s._v("\nrg "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" py "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'import requests'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有没有写 shebang 的文件（包含隐藏文件）")]),s._v("\nrg "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-u")]),s._v(" --files-without-match "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^#!"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有的foo字符串，并打印其之后的5行")]),s._v("\nrg foo "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印匹配的统计信息（匹配的行和文件的数量）")]),s._v("\nrg "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--stats")]),s._v(" PATTERN\n")])])]),a("h2",{attrs:{id:"_2-4-查找-shell-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-查找-shell-命令"}},[s._v("#")]),s._v(" 2.4 查找 shell 命令")]),s._v(" "),a("p",[s._v("首先，按向上的方向键会显示你使用过的上一条命令，继续按上键则会遍历整个历史记录。")]),s._v(" "),a("p",[a("code",[s._v("history")]),s._v("  命令允许您以程序员的方式来访问 shell 中输入的历史命令。这个命令会在标准输出中打印 shell 中的历史命令。如果我们要搜索历史记录，则可以利用管道将输出结果传递给  "),a("code",[s._v("grep")]),s._v("  进行模式搜索。 "),a("code",[s._v("history | grep find")]),s._v("  会打印包含 find 子串的命令。")]),s._v(" "),a("p",[s._v("对于大多数的 shell 来说，您可以使用  "),a("code",[s._v("Ctrl+R")]),s._v("  对命令历史记录进行回溯搜索。敲  "),a("code",[s._v("Ctrl+R")]),s._v("  后您可以输入子串来进行匹配，查找历史命令行。")]),s._v(" "),a("p",[s._v("反复按下就会在所有搜索结果中循环。在  "),a("a",{attrs:{href:"https://github.com/zsh-users/zsh-history-substring-search",target:"_blank",rel:"noopener noreferrer"}},[s._v("zsh"),a("OutboundLink")],1),s._v("  中，使用方向键上或下也可以完成这项工作。")]),s._v(" "),a("p",[a("code",[s._v("Ctrl+R")]),s._v("  可以配合  "),a("a",{attrs:{href:"https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#ctrl-r",target:"_blank",rel:"noopener noreferrer"}},[s._v("fzf"),a("OutboundLink")],1),s._v("  使用。"),a("code",[s._v("fzf")]),s._v("  是一个通用的模糊查找工具，它可以和很多命令一起使用。这里我们可以对历史命令进行模糊查找并将结果以赏心悦目的格式输出。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("搜索历史命令：")]),s._v(" "),a("p",[s._v("你可以通过管道将 "),a("code",[s._v("history")]),s._v(" 命令的输出送入 "),a("code",[s._v("fzf")]),s._v("，然后 "),a("code",[s._v("fzf")]),s._v(" 会提供一个交互式界面让你模糊搜索历史命令：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("history")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" fzf\n")])])]),a("p",[s._v("这将展示一个交互式列表，你可以开始输入来过滤历史命令。当你找到需要的命令时，按 Enter 键，"),a("code",[s._v("fzf")]),s._v(" 将把这个命令输出到标准输出。")])]),s._v(" "),a("li",[a("p",[s._v("执行选中的历史命令：")]),s._v(" "),a("p",[s._v("如果你想直接执行选择的命令，可以使用以下技巧结合 "),a("code",[s._v("xargs")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("history")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" fzf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $2}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-I")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),s._v("\n")])])]),a("p",[s._v("这条命令的工作流程是：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("history | fzf")]),s._v("：从历史中选择一个命令。")]),s._v(" "),a("li",[a("code",[s._v("awk '{print $2}'")]),s._v("：假设你的历史格式是编号后跟命令，这将抽取命令部分（根据你的 shell 历史格式可能需要调整）。")]),s._v(" "),a("li",[a("code",[s._v('xargs -I {} bash -c "{}"')]),s._v("：执行选中的命令。")])])])]),s._v(" "),a("p",[s._v("你可以修改 shell history 的行为，例如，如果在命令的开头加上一个空格，它就不会被加进 shell 记录中。当你输入包含密码或是其他敏感信息的命令时会用到这一特性。 为此你需要在"),a("code",[s._v(".bashrc")]),s._v("中添加"),a("code",[s._v("HISTCONTROL=ignorespace")]),s._v("或者向"),a("code",[s._v(".zshrc")]),s._v("  添加  "),a("code",[s._v("setopt HIST_IGNORE_SPACE")]),s._v("。 如果你不小心忘了在前面加空格，可以通过编辑  "),a("code",[s._v(".bash_history")]),s._v("或  "),a("code",[s._v(".zhistory")]),s._v("  来手动地从历史记录中移除那一项。")]),s._v(" "),a("h2",{attrs:{id:"_2-5-文件夹导航"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-文件夹导航"}},[s._v("#")]),s._v(" 2.5 文件夹导航")]),s._v(" "),a("p",[s._v("之前对所有操作我们都默认一个前提，即您已经位于想要执行命令的目录下，但是如何才能高效地在目录间随意切换呢？有很多简便的方法可以做到，比如设置 alias，使用  "),a("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/ln.1.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("ln -s"),a("OutboundLink")],1),s._v("  创建符号连接等。而开发者们已经想到了很多更为精妙的解决方案。")]),s._v(" "),a("p",[s._v("由于本课程的目的是尽可能对你的日常习惯进行优化。因此，我们可以使用"),a("code",[s._v("[fasd](https://github.com/clvv/fasd)")]),s._v("和  "),a("a",{attrs:{href:"https://github.com/wting/autojump",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("autojump")]),a("OutboundLink")],1),s._v("  这两个工具来查找最常用或最近使用的文件和目录。")]),s._v(" "),a("p",[s._v("Fasd 基于  *"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Frecency_algorithm",target:"_blank",rel:"noopener noreferrer"}},[s._v("frecency*"),a("OutboundLink")],1),s._v("  对文件和文件排序，也就是说它会同时针对频率（"),a("em",[s._v("frequency")]),s._v("）和时效（"),a("em",[s._v("recency")]),s._v("）进行排序。默认情况下，"),a("code",[s._v("fasd")]),s._v("使用命令  "),a("code",[s._v("z")]),s._v("  帮助我们快速切换到最常访问的目录。例如， 如果您经常访问"),a("code",[s._v("/home/user/files/cool_project")]),s._v("  目录，那么可以直接使用  "),a("code",[s._v("z cool")]),s._v("  跳转到该目录。对于 autojump，则使用"),a("code",[s._v("j cool")]),s._v("代替即可。")]),s._v(" "),a("p",[s._v("还有一些更复杂的工具可以用来概览目录结构，例如  "),a("code",[s._v("[tree](https://linux.die.net/man/1/tree)")]),s._v(", "),a("code",[s._v("[broot](https://github.com/Canop/broot)")]),s._v("  或更加完整的文件管理器，例如  "),a("code",[s._v("[nnn](https://github.com/jarun/nnn)")]),s._v("  或  "),a("code",[s._v("[ranger](https://github.com/ranger/ranger)")]),s._v("。")]),s._v(" "),a("h1",{attrs:{id:"_3-exercise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-exercise"}},[s._v("#")]),s._v(" 3. Exercise")]),s._v(" "),a("h2",{attrs:{id:"_3-1-ls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-ls"}},[s._v("#")]),s._v(" 3.1 ls")]),s._v(" "),a("p",[s._v("阅读  "),a("code",[s._v("[man ls](https://man7.org/linux/man-pages/man1/ls.1.html)")]),s._v(" ，然后使用"),a("code",[s._v("ls")]),s._v("  命令进行如下操作：")]),s._v(" "),a("ul",[a("li",[s._v("所有文件（包括隐藏文件）")]),s._v(" "),a("li",[s._v("文件打印以人类可以理解的格式输出 (例如，使用 454M 而不是 454279954)")]),s._v(" "),a("li",[s._v("文件以最近访问顺序排序")]),s._v(" "),a("li",[s._v("以彩色文本显示输出结果")])]),s._v(" "),a("p",[s._v("典型输出如下：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v(" -rw-r--r--   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user group "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".1M Jan "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" 09:53 baz\n drwxr-xr-x   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" user group  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("160")]),s._v(" Jan "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" 09:53 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n -rw-r--r--   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user group  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v(" Jan "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" 06:42 bar\n -rw-r--r--   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user group 106M Jan "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":12 foo\n drwx------+ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47")]),s._v(" user group "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".5K Jan "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(":08 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n")])])]),a("p",[a("img",{attrs:{src:t(348),alt:"Untitled"}})]),s._v(" "),a("h2",{attrs:{id:"_3-2-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-函数"}},[s._v("#")]),s._v(" 3.2 函数")]),s._v(" "),a("p",[s._v("编写两个 bash 函数  "),a("code",[s._v("marco")]),s._v("  和  "),a("code",[s._v("polo")]),s._v("  执行下面的操作。 每当你执行  "),a("code",[s._v("marco")]),s._v("  时，当前的工作目录应当以某种形式保存，当执行  "),a("code",[s._v("polo")]),s._v("  时，无论现在处在什么目录下，都应当  "),a("code",[s._v("cd")]),s._v("  回到当时执行  "),a("code",[s._v("marco")]),s._v("  的目录。 为了方便 debug，你可以把代码写在单独的文件  "),a("code",[s._v("marco.sh")]),s._v("  中，并通过  "),a("code",[s._v("source marco.sh")]),s._v("命令，（重新）加载函数。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env zsh")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("marco")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("/marco_history.log\n     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"save pwd '),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("polo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v('/marco_history.log"')]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env zsh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("marco")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MARCO")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("polo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$MARCO")]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("Answer:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("marco")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("current_dir")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("polo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$current_dir")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("img",{attrs:{src:t(349),alt:"Untitled"}})]),s._v(" "),a("h2",{attrs:{id:"_3-3-返回码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-返回码"}},[s._v("#")]),s._v(" 3.3 返回码")]),s._v(" "),a("p",[s._v("假设您有一个命令，它很少出错。因此为了在出错时能够对其进行调试，需要花费大量的时间重现错误并捕获输出。 编写一段 bash 脚本，运行如下的脚本直到它出错，将它的标准输出和标准错误流记录到文件，并在最后输出所有内容。")]),s._v(" "),a("p",[s._v("加分项：报告脚本在失败前共运行了多少次。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env zsh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$((")]),s._v(" RANDOM "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("))")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-eq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Something went wrong"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The error was using magic numbers"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Everything went according to plan"')]),s._v("\n")])])]),a("p",[s._v("Answer:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env zsh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("777")]),s._v(" 3script.sh\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("normCnt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    ./3script.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" 3log.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v(" 3err.txt\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-eq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The script failed"')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The script succeeded '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$normCnt")]),s._v(' times before failed"')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("break")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v("normCnt"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("p",[a("img",{attrs:{src:t(350),alt:"Untitled"}})]),s._v(" "),a("h2",{attrs:{id:"_3-4-find"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-find"}},[s._v("#")]),s._v(" 3.4 find")]),s._v(" "),a("p",[s._v("本节课我们讲解的  "),a("code",[s._v("find")]),s._v("  命令中的  "),a("code",[s._v("exec")]),s._v("  参数非常强大，它可以对我们查找的文件进行操作。但是，如果我们要对所有文件进行操作呢？例如创建一个 zip 压缩文件？我们已经知道，命令行可以从参数或标准输入接受输入。在用管道连接命令时，我们将标准输出和标准输入连接起来，但是有些命令，例如"),a("code",[s._v("tar")]),s._v("  则需要从参数接受输入。这里我们可以使用"),a("code",[s._v("[xargs](https://man7.org/linux/man-pages/man1/xargs.1.html)")]),s._v("  命令，它可以使用标准输入中的内容作为参数。 例如  "),a("code",[s._v("ls | xargs rm")]),s._v("  会删除当前目录中的所有文件。")]),s._v(" "),a("p",[s._v("您的任务是编写一个命令，它可以递归地查找文件夹中所有的 HTML 文件，并将它们压缩成 zip 文件。注意，即使文件名中包含空格，您的命令也应该能够正确执行（提示：查看  "),a("code",[s._v("xargs")]),s._v("的参数"),a("code",[s._v("-d")]),s._v("，译注：MacOS 上的  "),a("code",[s._v("xargs")]),s._v("没有"),a("code",[s._v("-d")]),s._v("，"),a("a",{attrs:{href:"https://github.com/missing-semester/missing-semester/issues/93",target:"_blank",rel:"noopener noreferrer"}},[s._v("查看这个 issue"),a("OutboundLink")],1),s._v("）")]),s._v(" "),a("p",[s._v("如果您使用的是 MacOS，请注意默认的 BSD "),a("code",[s._v("find")]),s._v("  与  "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/List_of_GNU_Core_Utilities_commands",target:"_blank",rel:"noopener noreferrer"}},[s._v("GNU coreutils"),a("OutboundLink")],1),s._v("  中的是不一样的。你可以为"),a("code",[s._v("find")]),s._v("添加"),a("code",[s._v("-print0")]),s._v("选项，并为"),a("code",[s._v("xargs")]),s._v("添加"),a("code",[s._v("-0")]),s._v("选项。作为 Mac 用户，您需要注意 mac 系统自带的命令行工具和 GNU 中对应的工具是有区别的；如果你想使用 GNU 版本的工具，也可以使用  "),a("a",{attrs:{href:"https://formulae.brew.sh/formula/coreutils",target:"_blank",rel:"noopener noreferrer"}},[s._v("brew 来安装"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[a("img",{attrs:{src:t(351),alt:"Untitled"}})]),s._v(" "),a("h2",{attrs:{id:"_3-5-lru"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-lru"}},[s._v("#")]),s._v(" 3.5 LRU")]),s._v(" "),a("p",[s._v("（进阶）编写一个命令或脚本递归的查找文件夹中最近使用的文件。更通用的做法，你可以按照最近的使用时间列出文件吗？")]),s._v(" "),a("p",[a("img",{attrs:{src:t(352),alt:"Untitled"}})]),s._v(" "),a("p",[s._v("管道实现的是将前面的输出"),a("code",[s._v("stdout")]),s._v("作为后面的输入"),a("code",[s._v("stdin")]),s._v("，但是有些命令不接受管道的传递方式。例如："),a("code",[s._v("ls")]),s._v("，这是为什么呢？")]),s._v(" "),a("p",[s._v("因为有些命令希望管道传递过来的是参数，但是直接使用管道有时无法传递到命令的参数位。这时候就需要"),a("code",[s._v("xargs")]),s._v("，"),a("code",[s._v("xargs")]),s._v("实现的是将管道传递过来的"),a("code",[s._v("stdin")]),s._v("进行处理然后传递到命令的参数位置上。")]),s._v(" "),a("p",[a("code",[s._v("xargs -0")]),s._v("  可以处理接收到的"),a("code",[s._v("stdin")]),s._v("中的 null 字符"),a("code",[s._v("（\\0）")]),s._v("。如果不使用"),a("code",[s._v("-0")]),s._v("选项或"),a("code",[s._v("-null")]),s._v("选项，检测到"),a("code",[s._v("\\0")]),s._v("后会给出警告提醒，并只向命令传递非"),a("code",[s._v("\\0")]),s._v("段。")])])}),[],!1,null,null,null);a.default=n.exports}}]);