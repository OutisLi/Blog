(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{453:function(t,n,s){"use strict";s.r(n);var a=s(14),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_2024-04-02-3-无重复字符的最长子串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2024-04-02-3-无重复字符的最长子串"}},[t._v("#")]),t._v(" 2024.04.02-3.无重复字符的最长子串")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n * @lc app=leetcode.cn id=3 lang=cpp\n *\n * [3] 无重复字符的最长子串\n *\n * https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/\n *\n * algorithms\n * Medium (39.02%)\n * Likes:    8247\n * Dislikes: 0\n * Total Accepted:    2M\n * Total Submissions: 5.2M\n * Testcase Example:  \'"abcabcbb"\'\n *\n * 给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。\n *\n *\n *\n * 示例 1:\n *\n *\n * 输入: s = "abcabcbb"\n * 输出: 3\n * 解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。\n *\n *\n * 示例 2:\n *\n *\n * 输入: s = "bbbbb"\n * 输出: 1\n * 解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。\n *\n *\n * 示例 3:\n *\n *\n * 输入: s = "pwwkew"\n * 输出: 3\n * 解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。\n * 请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。\n *\n *\n *\n *\n * 提示：\n *\n *\n * 0 <= s.length <= 5 * 10^4\n * s 由英文字母、数字、符号和空格组成\n *\n *\n */')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @lc code=start")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// class Solution")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// public:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     int lengthOfLongestSubstring(string s)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         int result = 0;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         unordered_map<char, int> num;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         int l = 0;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         for (int r = 0; r < s.length(); ++r)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             num[s[r]]++;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             while (num[s[r]] >= 2)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                 num[s[l++]]--;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             }")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//             result = max(r - l + 1, result);")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         }")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         return result;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// };")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("lengthOfLongestSubstring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        unordered_map"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" in "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            right"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" out "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                left"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @lc code=end")]),t._v("\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);